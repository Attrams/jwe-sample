package com.springboot.jwesample;

import com.nimbusds.jose.JOSEException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This Controller class is used for sending jwt.
 *
 * @author Papa Attrams
 * @since 1.0
 */

@RestController
@RequestMapping(path = "/token")
public class JwtController {

    /**
     * This method returns an encrypted json web token (jwt). This token cannot be debugged fully at the
     * <a href="https://jwt.io/">jwt.io</a> website since it's an encrypted JWT hence the payload will be encrypted
     * but the headers(eg. "enc" (Encryption Algorithm), "alg" (Algorithm), "tag" (HMAC generated from
     * applying AES-256-GCW-KW to the CEK(Content Encryption Key)), "IV" (Initialization Vector, used for the
     * encryption of CEK), etc.) will be visible.
     * <p>
     * Refer to <a href = "https://datatracker.ietf.org/doc/html/rfc7516">https://datatracker.ietf.org/doc/html/rfc7516</a>
     * for more information on JWE.
     *
     * @return a {@link ResponseEntity} containing the encrypted Json Web Token(JWE).
     */
    @GetMapping(path = "/create")
    public ResponseEntity<Map<String, String>> createJwt() {
        JwtTokenUtil jwtTokenUtil = new JwtTokenUtil();
        String jwt = jwtTokenUtil.create("kofi");

        Map<String, String> message = new HashMap<>();
        message.put("jwe_token", jwt);

        return new ResponseEntity<>(message, HttpStatus.OK);
    }

    /**
     * This method returns the payload of the encrypted JWT which was generated by {@link #createJwt()}.
     * The payload is itself a JWT token which can be debugged using the <a href="https://jwt.io/">jwt.io</a> website.
     *
     * @param token The encrypted json web token (jwe) which was returned by the {@link #createJwt()} method.
     * @return A Json Web Token which is signed but not encrypted.
     * @throws JOSEException This Exception is thrown when an error occurs during decryption of encrypted JWT.
     * @throws ParseException This Exception is thrown when an encrypted JWT format doesn't match the required format.
     */
    @PostMapping(path = "/decrypt")
    public ResponseEntity<Map<String, String>> decryptJwt(@RequestParam("token") String token) throws JOSEException, ParseException {
        JwtTokenUtil jwtTokenUtil = new JwtTokenUtil();
        String jwt = jwtTokenUtil.read(token);

        Map<String, String> message = new HashMap<>();
        message.put("jwt_token", jwt);

        return new ResponseEntity<>(message, HttpStatus.OK);
    }

    /**
     * This method returns the claims from the decrypted Json Web Token.
     *
     * @param token The Encrypted Json Web Token (JWE)
     * @return A Map containing the decrypted token, authorities, token validity and subject.
     * @throws JOSEException This Exception is thrown when an error occurs during decryption of encrypted JWT.
     * @throws ParseException This Exception is thrown when an encrypted JWT format doesn't match the required format.
     */
    @PostMapping(path = "/info")
    public ResponseEntity<Map<String, Object>> jwtInfo(@RequestParam("token") String token) throws JOSEException, ParseException {
        JwtTokenUtil jwtTokenUtil = new JwtTokenUtil();
        String jwt = jwtTokenUtil.read(token);
        List<String> authorities = jwtTokenUtil.getAuthorities(jwt);
        boolean isValid = jwtTokenUtil.isTokenValid("Kofi", jwt);
        String subject = jwtTokenUtil.getSubject(jwt);

        Map<String, Object> message = new HashMap<>();
        message.put("jwt_token", jwt);
        message.put("authorities", authorities);
        message.put("tokenValid", isValid);
        message.put("subject", subject);

        return new ResponseEntity<>(message, HttpStatus.OK);
    }
}
